import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Main plugin build
const mainContext = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "dist/main.js",
	minify: prod,
});

// MCP server build
const mcpContext = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/mcp-permission-server.ts"],
	bundle: true,
	external: [],
	format: "cjs",
	platform: "node",
	target: "node18",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "dist/mcp-permission-server.js",
	define: {
		'process.env.NODE_ENV': JSON.stringify(prod ? 'production' : 'development')
	},
	minify: prod,
});

if (prod) {
	await Promise.all([
		mainContext.rebuild(),
		mcpContext.rebuild()
	]);
	process.exit(0);
} else {
	await Promise.all([
		mainContext.watch(),
		mcpContext.watch()
	]);
}